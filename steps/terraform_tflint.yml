parameters:
  - name: condition
    type: string
    default: succeededOrFailed()
  - name: moduleDirectories
    type: object
    default: []
  - name: tflintConfigPath
    type: string
    default: $(Build.Repository.LocalPath)/.tflint.hcl
  - name: workingDirectory
    type: string
    default: $(Build.Repository.LocalPath)

steps:
  - script: |
      tflint --init --config ${{ parameters.tflintConfigPath }}

      errors=false
      working_dir=$PWD
      module_directories="${{ join(' ', parameters.moduleDirectories) }}"

      # Run TFLint in the working directory, if there is no terraform configuration code to scan, we still get an exit code 0
      echo "Running TFLint in root directory..."
      tflint --config ${{ parameters.tflintConfigPath }}

      if [[ $? -ne 0 ]]; then
        echo "Issues found in module at path `pwd`"
        errors=true
      else
        echo "No issues found!"
      fi

      # Run TFLint in any of the specified module directories e.g. /stacks or /modules
      # Expect these directories to contain more sub-folders containing Terraform code
      if [[ ! -z "${module_directories// }" ]]; then
        for d in ${module_directories}; do
          cd $d

          for m in *; do
            cd $m
            echo "Running TFLint in module at path `pwd`"
            tflint --config ${{ parameters.tflintConfigPath }}
            
            if [[ $? -ne 0 ]]; then
              echo "Issues found in module at path `pwd`"
              errors=true
            else
              echo "No issues found!"
            fi
            cd ..
          done

          cd $working_dir
        done
      fi

      if [[ $errors == true ]]; then
        exit 1
      fi
    condition: ${{ parameters.condition }}
    displayName: Run TFLint
    workingDirectory: ${{ parameters.workingDirectory }}

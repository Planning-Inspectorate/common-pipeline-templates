parameters:
  - name: appName
    type: string
  - name: appResourceGroup
  - name: appStagingSlotName
    type: string
    default: staging
  - name: azurecrName
    type: string
  - name: repository
    type: string
  - name: tag
    type: string
    default: ''

steps:
  - script: |
      TAG=${{ coalesce(parameters.tag, replace(replace(variables['Build.SourceBranch'], 'refs/heads/', ''), '/', '.')) }}

      echo "##vso[build.addbuildtag]$TAG"
      echo "##vso[task.setvariable variable=tag]$TAG"
    displayName: Add Docker Image Build Tags
  - script: |
      IMAGE=${{ parameters.azurecrName }}.azurecr.io/${{ parameters.repository }}

      az account set -s $(CONTAINER_REGISTRY_SUBSCRIPTION_ID)
      az acr login --name ${{ parameters.azurecrName }} || { echo "##vso[task.logissue type=error]Login to container registry failed."; exit 1; }

      echo "Checking image exists in registry..."
      docker manifest inspect $IMAGE:$(tag) > /dev/null
      
      if [[ $? -ne 0 ]]; then
        echo "##vso[task.logissue type=error]Image/tag not found in registry."
        exit 1
      else
        echo "Image found..."
      fi

      echo "Pull image to set environment tag..."
      docker pull $IMAGE:$(tag)
      docker tag $IMAGE:$(tag) $IMAGE:$(ENVIRONMENT)
      docker push $IMAGE:$(ENVIRONMENT)

      az account set -s $(SUBSCRIPTION_ID)

      echo "Checking App Service Continuous Deployment enabled..."
      CD_ENABLED=$(az webapp deployment container show-cd-url --name ${{ parameters.appName }} --resource-group ${{ parameters.appResourceGroup }} --slot ${{ parameters.appStagingSlotName }} | jq .DOCKER_ENABLE_CI)

      if [[ $CD_ENABLED == "false" ]]; then
        echo "Enabling Continuous Deployment..."
        az webapp deployment container config --enable-cd true --name ${{ parameters.appName }} --resource-group ${{ parameters.appResourceGroup }} --slot ${{ parameters.appStagingSlotName }}
      fi

      CURRENT_IMAGE_NAME=$(az webapp config container show --name ${{ parameters.appName }} --resource-group ${{ parameters.appResourceGroup }} --slot ${{ parameters.appStagingSlotName }} | jq -r '.[] | select(.name == "DOCKER_CUSTOM_IMAGE_NAME").value')
      CURRENT_TAG=${CURRENT_IMAGE_NAME#*:}
      
      echo "App Service currently running container from tag: $CURRENT_TAG"

      if [[ $CURRENT_TAG != "$(ENVIRONMENT)" ]]; then
        echo "Staging App Service to run tag: $(ENVIRONMENT)..."
        az webapp config container set --name ${{ parameters.appName }} \
        --resource-group ${{ parameters.appResourceGroup }} \
        --docker-custom-image-name $IMAGE:$(ENVIRONMENT) \
        --docker-registry-server-url https://${{ parameters.azurecrName }}.azurecr.io \
        --docker-registry-server-user $AZURE_SERVICE_PRINCIPAL_ID \
        --docker-registry-server-password $AZURE_SERVICE_PRINCIPAL_SECRET \
        --slot ${{ parameters.appStagingSlotName }}

        echo "Swapping App Service staging slot to production slot..."
        az webapp deployment slot swap --name ${{ parameters.appName }} \
        --resource-group ${{ parameters.appResourceGroup }} \
        --slot ${{ parameters.appStagingSlotName }} \
        --target-slot production
      else
        echo "App Service will pull latest version of tag: $(ENVIRONMENT)"
      fi
    displayName: Deploy Container to Azure Web App
    env:
      AZURE_SERVICE_PRINCIPAL_ID: $(AZURE_SERVICE_PRINCIPAL_ID)
      AZURE_SERVICE_PRINCIPAL_SECRET: $(AZURE_SERVICE_PRINCIPAL_SECRET)

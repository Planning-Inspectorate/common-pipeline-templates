parameters:
  - name: azurecrName
    type: string
    default: pinscrsharedtoolinguks
  - name: repositories
    type: string
  - name: slotName
    type: string
    default: staging

steps:
  - script: |
      # Variables
      REPOS=$(echo '${{ parameters.repositories }}' | jq -r '.[]')
      echo "Deleting for: ${REPOS[@]}"

      ACR_SUBSCRIPTION="edb1ff78-90da-4901-a497-7e79f966f8e2"
      APP_SERVICE_SUBSCRIPTIONS=("962e477c-0f3b-4372-97fc-a198a58e259e" "76cf28c6-6fda-42f1-bcd9-6d7dbed704ef" "dbfbfbbf-eb6f-457b-9c0c-fe3a071975bc" "d1d6c393-2fe3-40af-ac27-f5b6bad36735")

      # Fetch all in-use images
      echo "Fetching in-use images from App Services..."
      in_use_images=()

      for subscription_id in "${APP_SERVICE_SUBSCRIPTIONS[@]}"; do
        az account set --subscription "$subscription_id"
        if [ $? -ne 0 ]; then
            echo "Failed to set subscription: $subscription_id"
            exit 1
        fi

        app_services=$(az webapp list --query "[].{name: name, resourceGroup: resourceGroup}" -o tsv)
        if [ $? -ne 0 ]; then
            echo "Failed to list web apps for subscription: $subscription_id"
            exit 1
        fi
        echo ""
        echo "$app_services"

        while IFS=$'\t' read -r name resourceGroup; do
            echo ""
            echo "$name:$resourceGroup"
            # Get image for the main app service
            container_image_name=$(az webapp config container show --name "$name" --resource-group "$resourceGroup")
            if [ $? -ne 0 ]; then
                echo "Failed to get container image for app service: $name in resource group: $resourceGroup"
                exit 1
            fi

            container_image=$(echo "$container_image_name" | jq -r '.[] | select(.name == "DOCKER_CUSTOM_IMAGE_NAME").value' | awk -F'|' '{print $2}')
            if [ -n "$container_image" ]; then
                in_use_images+=("$container_image")
                echo "Container Tag Name: $container_image"
            fi

            # get the slot image
            slot_image_name=$(az webapp config container show --name "$name" --resource-group "$resourceGroup" --slot "${{ parameters.slotName }}")            
            if [ $? -ne 0 ]; then
                echo "Failed to get slot image for app service: $name in resource group: $resourceGroup"
                exit 1
            fi

            slot_image=$(echo "$slot_image_name" | jq -r '.[] | select(.name == "DOCKER_CUSTOM_IMAGE_NAME").value' | awk -F'|' '{print $2}')
            if [ -n "$slot_image" ]; then
                in_use_images+=("$slot_image")
                echo "Slot Tag Name: $slot_image"
            fi
        done <<< "$app_services"
      done

      # Filter out in-use images
      echo ""
      echo "switching to acr subscription"
      az account set --subscription "$ACR_SUBSCRIPTION"
      if [ $? -ne 0 ]; then
          echo "Error: Failed to set ACR subscription $ACR_SUBSCRIPTION"
          exit 1
      fi
      az acr login --name "${{ parameters.azurecrName }}"

      declare -A acr_outputs
      in_use_digests=()
      # Loop through each image in the in_use_images array
      echo ""
      echo "Getting manifests for in use images"
      for image in "${in_use_images[@]}"; do
        # Extract the repository and tag from the image
        # e.g. pinscrsharedtoolinguks.domain/service/package:tag
        repository=$(echo "$image" | cut -d'/' -f2- | cut -d':' -f1) # take all after 1st / | take all before 1st :
        tag=$(echo "$image" | awk -F':' '{print $2}') # take all after 1st :

        if [ -z "${acr_outputs[$repository]}" ]; then
          echo "Getting manifest for $repository"
          acr_output=$(az acr manifest list-metadata --registry "${{ parameters.azurecrName }}" --name "$repository" --output json)
          acr_outputs[$repository]="$acr_output"
          # echo "ACR Output for $repository: ${acr_outputs[$repository]}"
        fi

        # Use jq to get the digest associated with our tag
        digest=$(echo "${acr_outputs[$repository]}" | jq -r '.[] | select(.tags and (.tags[] == "'"$tag"'")) | .digest')

        if [ -n "$digest" ]; then
          echo "Image: $image, Digest: $digest"
          in_use_digests+=("$digest")
        else
          echo "Failed to get digest for image: $image"
          exit 1
        fi
      done
      # Output the array of in-use digests
      echo ""
      echo "In-use digests: ${in_use_digests[@]}"

      echo ""
      echo "Getting a list of manifests to purge"
      for repository in ${REPOS[@]}; do
        all_manifests=$(az acr manifest list-metadata --registry "${{ parameters.azurecrName }}" --name "$repository" --output json | jq -r '.[].digest')
        # Convert all_manifests to an array
        mapfile -t all_manifests_array <<< "$all_manifests"

        # todo: could we get duplicates here?
        manifests_to_purge=()
        for manifest in "${all_manifests_array[@]}"; do
          in_use=false
          for inUseDigest in "${in_use_digests[@]}"; do
            if [[ "$inUseDigest" == "$manifest" ]]; then
              in_use=true
              break
            fi
          done
          if [ "$in_use" = false ]; then
            manifests_to_purge+=("$manifest")
          fi
        done
        echo "$repository include: ${manifests_to_purge[@]}"

        echo ""
        echo "deleting for $repository"
        for digest in "${manifests_to_purge[@]}"; do
          echo "deleting $repository@$digest"
          az acr repository delete --name "${{ parameters.azurecrName }}" --image "$repository@$digest" --yes
          if [ $? -ne 0 ]; then
            echo "Error: Failed to delete ACR $digest"
            exit 1
          fi
        done
      done

      echo "Cleanup completed."
    name: purgeImagesForRepo
    displayName: Purge Images For Repo
    env:
      AZURE_SERVICE_PRINCIPAL_ID: $(AZURE_SERVICE_PRINCIPAL_ID)
      AZURE_SERVICE_PRINCIPAL_SECRET: $(AZURE_SERVICE_PRINCIPAL_SECRET)

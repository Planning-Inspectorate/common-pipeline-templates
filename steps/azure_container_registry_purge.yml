parameters:
  - name: azurecrName
    type: string
    default: pinscrsharedtoolinguks
  - name: repositories
    type: string
  - name: slotName
    type: string
    default: staging

steps:
  - script: |
      # Variables
      REPOS=$(echo '${{ parameters.repositories }}' | jq -r '.[]')
      echo "Deleting for: ${REPOS[@]}"

      ACR_SUBSCRIPTION="edb1ff78-90da-4901-a497-7e79f966f8e2"
      APP_SERVICE_SUBSCRIPTIONS=("962e477c-0f3b-4372-97fc-a198a58e259e" "76cf28c6-6fda-42f1-bcd9-6d7dbed704ef" "dbfbfbbf-eb6f-457b-9c0c-fe3a071975bc" "d1d6c393-2fe3-40af-ac27-f5b6bad36735")

      # Fetch all in-use images
      echo "Fetching in-use images from App Services..."
      in_use_images=()

      for subscription_id in "${APP_SERVICE_SUBSCRIPTIONS[@]}"; do
        az account set --subscription "$subscription_id"
        if [ $? -ne 0 ]; then
            echo "Failed to set subscription: $subscription_id"
            exit 1
        fi

        app_services=$(az webapp list --query "[].{name: name, resourceGroup: resourceGroup}" -o tsv)
        if [ $? -ne 0 ]; then
            echo "Failed to list web apps for subscription: $subscription_id"
            exit 1
        fi
        echo "$app_services"

        while IFS=$'\t' read -r name resourceGroup; do
            echo "$name:$resourceGroup"
            # Get image for the main app service
            container_image_name=$(az webapp config container show --name "$name" --resource-group "$resourceGroup")
            if [ $? -ne 0 ]; then
                echo "Failed to get container image for app service: $name in resource group: $resourceGroup"
                exit 1
            fi

            container_image=$(echo $container_image_name | jq -r '.[] | select(.name == "DOCKER_CUSTOM_IMAGE_NAME").value' | awk -F'|' '{print $2}')
            if [ -n "$container_image" ]; then
                in_use_images+=("$container_image")
                echo "Container Tag Name: $container_image"
            fi

            # get the slot image
            slot_image_name=$(az webapp config container show --name "$name" --resource-group "$resourceGroup" --slot "${{ parameters.slotName }}")            
            if [ $? -ne 0 ]; then
                echo "Failed to get slot image for app service: $name in resource group: $resourceGroup"
                exit 1
            fi

            slot_image=$(echo $slot_image_name | jq -r '.[] | select(.name == "DOCKER_CUSTOM_IMAGE_NAME").value' | awk -F'|' '{print $2}')
            if [ -n "$slot_image" ]; then
                in_use_images+=("$slot_image")
                echo "Slot Tag Name: $slot_image"
            fi
        done <<< "$app_services"
      done

      # Filter out in-use images
      echo "switching to acr subscription"
      az account set --subscription "$ACR_SUBSCRIPTION"
      if [ $? -ne 0 ]; then
          echo "Error: Failed to set ACR subscription $ACR_SUBSCRIPTION"
          exit 1
      fi
      az acr login --name ${{ parameters.azurecrName }}


      for repository in ${REPOS[@]}; do
        all_tags=$(az acr repository show-tags --name ${{ parameters.azurecrName }} --repository "$repository" --output tsv)
        # Convert all_tags to an array
        IFS=$'\n' read -r -d '' -a all_tags_array <<< "$all_tags"

        images_to_purge=()
        for tag in "${all_tags_array[@]}"; do
          in_use=false
          for image in "${in_use_images[@]}"; do
            if [[ "$image" == "${{ parameters.azurecrName }}.azurecr.io/$repository:$tag" ]]; then
              in_use=true
              break
            fi
          done
          if [ "$in_use" = false ]; then
            images_to_purge+=("$repository:$tag")
          fi
        done

        echo "$repository include: ${images_to_purge[@]}"

        for tag in "${images_to_purge[@]}"; do
            az acr repository delete --name "${{ parameters.azurecrName }}" --image "$tag" --yes
            if [ $? -ne 0 ]; then
              echo "Error: Failed to delete ACR $tag"
              exit 1
            fi
        done
      done

      # Convert images to purge to a regex pattern
      # include_images=$(IFS='|'; echo "${images_to_purge[*]}")
      # purge images in include list
      # filters="^(${include_images})$"
      # PURGE_CMD="acr purge --ago 14d --dry-run --untagged --filter '$filters'"
      # az acr run --cmd "$PURGE_CMD" --registry ${{ parameters.azurecrName }} /dev/null
      # if [ $? -ne 0 ]; then
      #   echo "Error: Failed to execute purge command"
      #   exit 1
      # fi
      # todo: resolve purge permissions to use purge
      # ERROR: The resource with name 'pinscrsharedtoolinguks' and type 'Microsoft.ContainerRegistry/registries' could not be found in subscription 'pins-odt-tooling-shared-sub (edb1ff78-90da-4901-a497-7e79f966f8e2)'.


      echo "Cleanup completed."
    name: purgeImagesForRepo
    displayName: Purge Images For Repo
    env:
      AZURE_SERVICE_PRINCIPAL_ID: $(AZURE_SERVICE_PRINCIPAL_ID)
      AZURE_SERVICE_PRINCIPAL_SECRET: $(AZURE_SERVICE_PRINCIPAL_SECRET)

parameters:
  - name: appName
    type: string
  - name: appUrl
    type: string
  - name: buildCommit
    type: string
  - name: retries
    type: number
    default: 6
  - name: sleepTime
    type: number
    default: 30
  - name: appRegistrationClientId
    type: string
    default: ""
  - name: auth_enabled
    type: string 
    default: "false"
  - name: env
    type: string
    default: "dev"

steps:
  - script: |
      verify_commit_hash() {
        service_name=$1
        service_url=$2
        build_commit=$3
        max_attempts=$4
        sleep_time=$5
        run_with_auth=false
        if [[ "${{ parameters.env}}" != "prod"  && "${{ parameters.auth_enabled}}" == "true" ]]; then
          run_with_auth=true
        fi
      
        if [[ $run_with_auth -eq true ]]; then
          echo "Running with authorization header"
        else
          echo "Running without authorization header"
        fi
      
        if [ -z "$max_attempts" ]; then
          max_attempts=5
        fi
      
        attempt=0
      
        while [ $attempt -lt $max_attempts ]; do
          echo "Waiting $sleep_time seconds for $service_name to start..."
          sleep $(($sleep_time*attempt))
          
          echo "##[section]Calling $service_name (attempt $(($attempt+1))/$max_attempts)"
          
          if [[ $run_with_auth -eq true ]]; then
            echo "##[command]Generating access token"
            TOKEN=$(az account get-access-token --query accessToken -o tsv --resource "${{ parameters.appRegistrationClientId}}")
            response=$(curl -s -w "\n%{http_code}" --connect-timeout 10 $service_url -H "Authorization: Bearer $TOKEN"|| echo "error")
          else
            response=$(curl -s -w "\n%{http_code}" --connect-timeout 10 $service_url || echo "error")
          fi
          
          # Get status code
          http_status=$(echo "$response" | tail -n 1)
          body=$(echo "$response" | sed '$d')
          
          if [[ "$http_status" == "200" ]]; then
            commit=$(echo "$body" | grep -o '"commit":"[^"]*"' | sed 's/"commit":"\([^"]*\)"/\1/')
            if [[ "$commit" == "$build_commit" ]]; then
              echo "$service_name commit hash matches: $commit"
              return 0
            else
              echo "##[warning]$service_name commit hash mismatch. Got: $commit, expected: $build_commit"
            fi
          else
            echo "##[error]$service_name /health call failed with status code: $http_status. Retrying in $sleep_time seconds..."
            echo "##[debug]Response Body: $body"
          fi
          
          attempt=$((attempt+1))
        done
      
        echo "##[error]$service_name commit hash verify failed after $max_attempts attempts"
        return 1
      }
      
      
      echo "##[group]Parameters:"
      echo "App Name: ${{ parameters.appName }}"
      echo "Health endpoint: ${{ parameters.appUrl }}"
      echo "Commit to deploy: ${{ parameters.buildCommit }}"
      echo "Max retries: ${{ parameters.retries }}, sleep time: ${{ parameters.sleepTime }}s"
      echo "Auth enabled: ${{ parameters.auth_enabled }} (client id: ${{ parameters.appRegistrationClientId }}, env: ${{ parameters.env }})"
      echo "##[endgroup]"
        
      verify_commit_hash "${{ parameters.appName }}" "${{ parameters.appUrl }}" "${{ parameters.buildCommit }}" ${{ parameters.retries }} ${{ parameters.sleepTime }}
    displayName: Verify deployed git hash
    workingDirectory: $(Build.Repository.LocalPath)
    env:
      AZURE_SERVICE_PRINCIPAL_ID: $(AZURE_SERVICE_PRINCIPAL_ID)
      AZURE_SERVICE_PRINCIPAL_SECRET: $(AZURE_SERVICE_PRINCIPAL_SECRET)
